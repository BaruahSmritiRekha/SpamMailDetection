# -*- coding: utf-8 -*-
"""Spam Mail Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ccyZ4fVyKM3VWf7ruBg8g_Gcz2zr6bSs

import libaries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

"""Data preprocessing

"""

raw_mail_data=pd.read_csv('spam.csv',encoding = "ISO-8859-1")
#replace the null values with a null string
mail_data=raw_mail_data.where((pd.notnull(raw_mail_data)),'')

mail_data.shape

mail_data.head()

#label spam mail as 0, non-spam mail(ham) mail as 1
mail_data.loc[mail_data['v1']=='spam','v1',]=0
mail_data.loc[mail_data['v1']=='ham','v1',]=1

#seperate the data as tesxt and label.x--->text,y---->label
x=mail_data['v2']
y=mail_data['v1']

print(x)
print('''''''')
print(y)

"""Train Test Split"""

#split the data as train data and test data
x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8,test_size=0.2,random_state=3)

"""Feature Extraction

"""

#transform the text data to feature vectors that can be used as input to the svm model using Tfidvectorizer
#convert the text to lower case letters
feature_extraction=TfidfVectorizer(use_idf=1,stop_words='english',lowercase='True')
x_train_features=feature_extraction.fit_transform(x_train)
x_test_features=feature_extraction.transform(x_test)

#convert y_train and y-test values as integers
y_train=y_train.astype('int')
y_test=y_test.astype('int')

"""Training the model--->**Support Vector Machine**"""

model=LinearSVC()
model.fit(x_train_features,y_train)

"""Evaluation of the model

"""

#predict on training data
prediction_on_training_data=model.predict(x_train_features)
accuracy_score=accuracy_score(y_train,prediction_on_training_data)

print('accuracy on training data',accuracy_score)

from sklearn.metrics import accuracy_score
#prediction on test data
prediction_on_test_data=model.predict(x_test_features)
accuracy_Test_score=accuracy_score(y_test,prediction_on_test_data)

print('accuracy on training data',accuracy_Test_score)

"""Prediction On New Mail"""

input_mail=["URGENT! You have won a 1 week FREE membership in our å£100,000 Prize Jackpot! Txt the word: CLAIM to No: 81010 T&C www.dbuk.net LCCLTD POBOX 4403LDNW1A7RW18"]
#convert text to feature vectors
input_mail_features=feature_extraction.transform(input_mail)

#making prediction
prediction=model.predict(input_mail_features)
print(prediction)

if(prediction[0]==0):
 print('Spam mail')
else:
  print('ham mail')

input_mail=["I'm back &amp; we're packing the car now, I'll let you know if there's room"]
#convert text to feature vectors
input_mail_features=feature_extraction.transform(input_mail)

#making prediction
prediction=model.predict(input_mail_features)
print(prediction)

if(prediction[0]==0):
 print('Spam mail')
else:
  print('ham mail')